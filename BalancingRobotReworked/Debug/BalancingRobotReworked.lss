
BalancingRobotReworked.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .stab         00000ae0  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f32  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000027c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__vector_18>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	57 c0       	rjmp	.+174    	; 0x136 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:

volatile char direction[3];
volatile uint8_t tracking=0;
volatile uint8_t directionReceived=0;

int main(void){
  8a:	04 d0       	rcall	.+8      	; 0x94 <_Z8initUARTv>
  8c:	78 94       	sei
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <_Z8initUARTv>:
/*
 * initUART : sets baudrate, no parity,8-bit data, 1 stop-bit, asynchronous mode and enables RX, TX pins
 * TODO : Check taht USE_2X thing
*/
void initUART(){
    UBRR0H = UBRRH_VALUE;
  94:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE;
  98:	83 e3       	ldi	r24, 0x33	; 51
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    #if USE_2X
    UCSR0A |= (1 << U2X0);
    #else
    UCSR0A &= ~(1 << U2X0);
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	80 83       	st	Z, r24
    #endif
    //UBRRH = 0;              //setup for 9600 baudrate UBRRH_VALUE always wanted to use 2x mode
    //UBRRL = 6;


    UCSR0B |= _BV(RXEN0) | _BV(TXEN0);   //enables receiver and transmitter
  a8:	a1 ec       	ldi	r26, 0xC1	; 193
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	8c 91       	ld	r24, X
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	8c 93       	st	X, r24

    UCSR0C &= ~(_BV(UMSEL0) | _BV(UMSEL1));       //asynchronous mode
  b2:	e2 ec       	ldi	r30, 0xC2	; 194
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 73       	andi	r24, 0x3F	; 63
  ba:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(UPM00) | _BV(UPM01));           //no parity mode
  bc:	80 81       	ld	r24, Z
  be:	8f 7c       	andi	r24, 0xCF	; 207
  c0:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(USBS0));                      //1 stop-bit
  c2:	80 81       	ld	r24, Z
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 83       	st	Z, r24
    UCSR0C |= (_BV(UCSZ01) | _BV(UCSZ00));           //8-bits of data
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(UCSZ02));
  ce:	80 81       	ld	r24, Z
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	80 83       	st	Z, r24
    #if USE_INTERRUPT
    UCSR0B |= _BV(TXCIE0);                  //enables interrupt on receive
  d4:	8c 91       	ld	r24, X
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8c 93       	st	X, r24
  da:	08 95       	ret

000000dc <__vector_18>:

/*
 * TODO : Check whether it won't be necessary to clear some flags after the interrupt
 */

ISR(USART_RX_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
    char receivedByte = UDR0;
  ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if((tracking < 2) && (receivedByte != '\n')){
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <tracking>
  f6:	92 30       	cpi	r25, 0x02	; 2
  f8:	10 f4       	brcc	.+4      	; 0xfe <__vector_18+0x22>
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	31 f4       	brne	.+12     	; 0x10a <__vector_18+0x2e>
        direction[tracking] = receivedByte;
        directionReceived = 0;
        tracking++;
        }
    else{
        tracking = 0;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tracking>
        directionReceived = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 108:	0d c0       	rjmp	.+26     	; 0x124 <__vector_18+0x48>
 */

ISR(USART_RX_vect){
    char receivedByte = UDR0;
    if((tracking < 2) && (receivedByte != '\n')){
        direction[tracking] = receivedByte;
 10a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <tracking>
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ee 5f       	subi	r30, 0xFE	; 254
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 83       	st	Z, r24
        directionReceived = 0;
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        tracking++;
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tracking>
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tracking>
        directionReceived = 1;
    }



}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
