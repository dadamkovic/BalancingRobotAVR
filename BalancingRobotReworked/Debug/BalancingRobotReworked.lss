
BalancingRobotReworked.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000d62  2**0
                  ALLOC
  3 .stab         0000252c  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001776  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004a06  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a18  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000055ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00005608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
   2:	00 00       	nop
   4:	56 c1       	rjmp	.+684    	; 0x2b2 <__vector_1>
   6:	00 00       	nop
   8:	65 c1       	rjmp	.+714    	; 0x2d4 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c3       	rjmp	.+1688   	; 0x6e2 <__vector_18>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a7 30       	cpi	r26, 0x07	; 7
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	1a c6       	rjmp	.+3124   	; 0xcea <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
volatile char direction[3];
volatile uint8_t tracking=0;
volatile uint8_t directionReceived=0;


int main(void){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	c0 54       	subi	r28, 0x40	; 64
  c2:	d1 09       	sbc	r29, r1
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63

    double accYAngle, gyroYAngle, compYAngle, dt;
    int8_t motorSpeed;


    initUART();                                     //set baudrate (BAUD) in uart.h if change is needed
  cc:	cd bf       	out	0x3d, r28	; 61
    initIIC();                                      //initializes TWI interface
  ce:	e5 d2       	rcall	.+1482   	; 0x69a <_Z8initUARTv>
  d0:	3a d1       	rcall	.+628    	; 0x346 <_Z7initIICv>
        volatile uint8_t encoder0 = 0;
        volatile uint8_t encoder1 = 0;
        //MotorDrive();
        MotorDrive(volatile uint8_t* a_port,volatile uint8_t* b_port, uint8_t a_pin_1, uint8_t a_pin_2, uint8_t b_pin_1, uint8_t b_pin_2)
        : _Motor_A_PORT(a_port), _Motor_B_PORT(b_port), _Motor_A_PIN_1(a_pin_1), _Motor_A_PIN_2(a_pin_2),
        _Motor_B_PIN_1(b_pin_1), _Motor_B_PIN_2(b_pin_2) {
  d2:	19 86       	std	Y+9, r1	; 0x09
  d4:	1a 86       	std	Y+10, r1	; 0x0a
  d6:	1b 86       	std	Y+11, r1	; 0x0b
  d8:	1c 86       	std	Y+12, r1	; 0x0c
  da:	1d 86       	std	Y+13, r1	; 0x0d
  dc:	1e 86       	std	Y+14, r1	; 0x0e
  de:	1f 86       	std	Y+15, r1	; 0x0f
  e0:	18 8a       	std	Y+16, r1	; 0x10
  e2:	19 8a       	std	Y+17, r1	; 0x11
  e4:	1a 8a       	std	Y+18, r1	; 0x12
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	9c 8b       	std	Y+20, r25	; 0x14
  ec:	8b 8b       	std	Y+19, r24	; 0x13
  ee:	9e 8b       	std	Y+22, r25	; 0x16
  f0:	8d 8b       	std	Y+21, r24	; 0x15
  f2:	1f 8a       	std	Y+23, r1	; 0x17
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	88 8f       	std	Y+24, r24	; 0x18
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	89 8f       	std	Y+25, r24	; 0x19
  fc:	83 e0       	ldi	r24, 0x03	; 3

        /*
         * INIT :   PORT for motor A , IN1, IN2, PORT for motor B, IN3, IN4
         */

        }
  fe:	8a 8f       	std	Y+26, r24	; 0x1a
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	aa d0       	rcall	.+340    	; 0x25a <_ZN10MotorDrive10initMotorsEv>
#define PID_H_

class PID{
    public:
        PID(float proportional, float integrate, float derivative):
        P(proportional), I(integrate),D(derivative){};
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	a0 ea       	ldi	r26, 0xA0	; 160
 10c:	b1 e4       	ldi	r27, 0x41	; 65
 10e:	8b 8f       	std	Y+27, r24	; 0x1b
 110:	9c 8f       	std	Y+28, r25	; 0x1c
 112:	ad 8f       	std	Y+29, r26	; 0x1d
 114:	be 8f       	std	Y+30, r27	; 0x1e
 116:	1f 8e       	std	Y+31, r1	; 0x1f
 118:	18 a2       	std	Y+32, r1	; 0x20
 11a:	19 a2       	std	Y+33, r1	; 0x21
 11c:	1a a2       	std	Y+34, r1	; 0x22
 11e:	1b a2       	std	Y+35, r1	; 0x23
 120:	1c a2       	std	Y+36, r1	; 0x24
 122:	1d a2       	std	Y+37, r1	; 0x25
 124:	1e a2       	std	Y+38, r1	; 0x26
 126:	1f a2       	std	Y+39, r1	; 0x27
 128:	18 a6       	std	Y+40, r1	; 0x28
 12a:	19 a6       	std	Y+41, r1	; 0x29
 12c:	1a a6       	std	Y+42, r1	; 0x2a
 12e:	1b a6       	std	Y+43, r1	; 0x2b
 130:	1c a6       	std	Y+44, r1	; 0x2c
 132:	1d a6       	std	Y+45, r1	; 0x2d
 134:	1e a6       	std	Y+46, r1	; 0x2e
 136:	78 94       	sei
 138:	8c d2       	rcall	.+1304   	; 0x652 <_Z9clockInitv>
 13a:	91 d2       	rcall	.+1314   	; 0x65e <_Z10clockStartv>
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	ce 01       	movw	r24, r28
 140:	8f 96       	adiw	r24, 0x2f	; 47
 142:	2b d1       	rcall	.+598    	; 0x39a <_Z10IICreadMPUPjh>
 144:	92 d2       	rcall	.+1316   	; 0x66a <_Z9clockTimev>
 146:	6b 01       	movw	r12, r22
 148:	7c 01       	movw	r14, r24
 14a:	6d a9       	ldd	r22, Y+53	; 0x35
 14c:	7e a9       	ldd	r23, Y+54	; 0x36
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	54 d4       	rcall	.+2216   	; 0x9fc <__floatunsisf>
 154:	a7 01       	movw	r20, r14
 156:	96 01       	movw	r18, r12
 158:	0b d5       	rcall	.+2582   	; 0xb70 <__mulsf3>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
 15e:	98 d2       	rcall	.+1328   	; 0x690 <_Z10clockResetv>
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	8f 96       	adiw	r24, 0x2f	; 47
 166:	19 d1       	rcall	.+562    	; 0x39a <_Z10IICreadMPUPjh>
 168:	69 a9       	ldd	r22, Y+49	; 0x31
 16a:	7a a9       	ldd	r23, Y+50	; 0x32
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	45 d4       	rcall	.+2186   	; 0x9fc <__floatunsisf>
 172:	2b 01       	movw	r4, r22
 174:	3c 01       	movw	r6, r24
 176:	79 d2       	rcall	.+1266   	; 0x66a <_Z9clockTimev>
 178:	6b 01       	movw	r12, r22
 17a:	7c 01       	movw	r14, r24
 17c:	6d a9       	ldd	r22, Y+53	; 0x35
 17e:	7e a9       	ldd	r23, Y+54	; 0x36
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	3b d4       	rcall	.+2166   	; 0x9fc <__floatunsisf>
 186:	a7 01       	movw	r20, r14
 188:	96 01       	movw	r18, r12
 18a:	f2 d4       	rcall	.+2532   	; 0xb70 <__mulsf3>
 18c:	9b 01       	movw	r18, r22
 18e:	ac 01       	movw	r20, r24
 190:	c5 01       	movw	r24, r10
 192:	b4 01       	movw	r22, r8
 194:	d4 d2       	rcall	.+1448   	; 0x73e <__addsf3>
 196:	4b 01       	movw	r8, r22
 198:	5c 01       	movw	r10, r24
 19a:	9b 01       	movw	r18, r22
 19c:	ac 01       	movw	r20, r24
 19e:	c3 01       	movw	r24, r6
 1a0:	b2 01       	movw	r22, r4
 1a2:	cd d2       	rcall	.+1434   	; 0x73e <__addsf3>
 1a4:	2b e7       	ldi	r18, 0x7B	; 123
 1a6:	34 e1       	ldi	r19, 0x14	; 20
 1a8:	4e e6       	ldi	r20, 0x6E	; 110
 1aa:	5f e3       	ldi	r21, 0x3F	; 63
 1ac:	e1 d4       	rcall	.+2498   	; 0xb70 <__mulsf3>
 1ae:	21 96       	adiw	r28, 0x01	; 1
 1b0:	6c af       	std	Y+60, r22	; 0x3c
 1b2:	7d af       	std	Y+61, r23	; 0x3d
 1b4:	8e af       	std	Y+62, r24	; 0x3e
 1b6:	9f af       	std	Y+63, r25	; 0x3f
 1b8:	21 97       	sbiw	r28, 0x01	; 1
 1ba:	29 e2       	ldi	r18, 0x29	; 41
 1bc:	3c e5       	ldi	r19, 0x5C	; 92
 1be:	4f e8       	ldi	r20, 0x8F	; 143
 1c0:	5d e3       	ldi	r21, 0x3D	; 61
 1c2:	c3 01       	movw	r24, r6
 1c4:	b2 01       	movw	r22, r4
 1c6:	d4 d4       	rcall	.+2472   	; 0xb70 <__mulsf3>
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	6c ad       	ldd	r22, Y+60	; 0x3c
 1d0:	7d ad       	ldd	r23, Y+61	; 0x3d
 1d2:	8e ad       	ldd	r24, Y+62	; 0x3e
 1d4:	9f ad       	ldd	r25, Y+63	; 0x3f
 1d6:	21 97       	sbiw	r28, 0x01	; 1
 1d8:	b2 d2       	rcall	.+1380   	; 0x73e <__addsf3>
 1da:	2d ec       	ldi	r18, 0xCD	; 205
 1dc:	3c ec       	ldi	r19, 0xCC	; 204
 1de:	4c e0       	ldi	r20, 0x0C	; 12
 1e0:	50 e4       	ldi	r21, 0x40	; 64
 1e2:	ad d2       	rcall	.+1370   	; 0x73e <__addsf3>
 1e4:	ab 01       	movw	r20, r22
 1e6:	bc 01       	movw	r22, r24
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	98 01       	movw	r18, r16
 1ee:	ce 01       	movw	r24, r28
 1f0:	4b 96       	adiw	r24, 0x1b	; 27
 1f2:	ab d1       	rcall	.+854    	; 0x54a <_ZN3PID10giveOutputEddd>
 1f4:	d2 d3       	rcall	.+1956   	; 0x99a <__fixsfsi>
 1f6:	65 36       	cpi	r22, 0x65	; 101
 1f8:	14 f0       	brlt	.+4      	; 0x1fe <main+0x146>
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <main+0x14c>
 1fe:	6c 39       	cpi	r22, 0x9C	; 156
 200:	0c f4       	brge	.+2      	; 0x204 <main+0x14c>
 202:	6c e9       	ldi	r22, 0x9C	; 156
 204:	67 5e       	subi	r22, 0xE7	; 231
 206:	ce 01       	movw	r24, r28
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	75 d0       	rcall	.+234    	; 0x2f6 <_ZN10MotorDrive12SetSpeedBothEa>
 20c:	a8 cf       	rjmp	.-176    	; 0x15e <main+0xa6>

0000020e <_ZN10MotorDrive6SetDIREhc>:
/*
*INPUT : direction of motor (<0 BACK, >0 FORWARD), char (A, B) selects which motor to control
*FUNCTION : sets PINS based on the desired direction of spin
*OUTPUT : 0
*/
uint8_t MotorDrive::SetDIR(uint8_t dir, char motor){
 20e:	fc 01       	movw	r30, r24
    volatile uint8_t *motor_port;
    int ctrlx1 = 0;
    int ctrlx0 = 0;
    switch(motor){
 210:	41 34       	cpi	r20, 0x41	; 65
 212:	39 f0       	breq	.+14     	; 0x222 <_ZN10MotorDrive6SetDIREhc+0x14>
 214:	42 34       	cpi	r20, 0x42	; 66
 216:	f9 f4       	brne	.+62     	; 0x256 <_ZN10MotorDrive6SetDIREhc+0x48>
                motor_port = _Motor_A_PORT;
                ctrlx0 = _Motor_A_PIN_1;
                ctrlx1 = _Motor_A_PIN_2;
                break;
        case 'B':
                motor_port = _Motor_B_PORT;
 218:	a4 89       	ldd	r26, Z+20	; 0x14
 21a:	b5 89       	ldd	r27, Z+21	; 0x15
                ctrlx0 = _Motor_B_PIN_1;
 21c:	40 8d       	ldd	r20, Z+24	; 0x18
                ctrlx1 = _Motor_B_PIN_2;
 21e:	21 8d       	ldd	r18, Z+25	; 0x19
 220:	04 c0       	rjmp	.+8      	; 0x22a <_ZN10MotorDrive6SetDIREhc+0x1c>
    volatile uint8_t *motor_port;
    int ctrlx1 = 0;
    int ctrlx0 = 0;
    switch(motor){
        case 'A':
                motor_port = _Motor_A_PORT;
 222:	a2 89       	ldd	r26, Z+18	; 0x12
 224:	b3 89       	ldd	r27, Z+19	; 0x13
                ctrlx0 = _Motor_A_PIN_1;
 226:	46 89       	ldd	r20, Z+22	; 0x16
                ctrlx1 = _Motor_A_PIN_2;
 228:	27 89       	ldd	r18, Z+23	; 0x17
    if(dir<0){
        *motor_port &= ~(1 << ctrlx0);
        *motor_port |= (1 << ctrlx1);
    }
    else{
        *motor_port |= (1 << ctrlx0);
 22a:	3c 91       	ld	r19, X
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	bc 01       	movw	r22, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <_ZN10MotorDrive6SetDIREhc+0x2a>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_ZN10MotorDrive6SetDIREhc+0x26>
 23c:	ab 01       	movw	r20, r22
 23e:	43 2b       	or	r20, r19
 240:	4c 93       	st	X, r20
        *motor_port &= ~(1<< ctrlx1);
 242:	3c 91       	ld	r19, X
 244:	01 c0       	rjmp	.+2      	; 0x248 <_ZN10MotorDrive6SetDIREhc+0x3a>
 246:	88 0f       	add	r24, r24
 248:	2a 95       	dec	r18
 24a:	ea f7       	brpl	.-6      	; 0x246 <_ZN10MotorDrive6SetDIREhc+0x38>
 24c:	80 95       	com	r24
 24e:	83 23       	and	r24, r19
 250:	8c 93       	st	X, r24
    }

   return 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
                motor_port = _Motor_B_PORT;
                ctrlx0 = _Motor_B_PIN_1;
                ctrlx1 = _Motor_B_PIN_2;
                break;
        default:
                return 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
        *motor_port |= (1 << ctrlx0);
        *motor_port &= ~(1<< ctrlx1);
    }

   return 0;
}
 258:	08 95       	ret

0000025a <_ZN10MotorDrive10initMotorsEv>:
/*
*INPUT : void
*FUNCTION : initializes timer0A for fast PWM on pins PD5, PD6 (5,6 on Arduino)
*OUTPUT : 0
*/
uint8_t MotorDrive::initMotors(){
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24

    DDRD |= (1 << DDD6) | (1 << DDD5) ;         // PD6, PD5 is now an output
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 66       	ori	r24, 0x60	; 96
 264:	8a b9       	out	0x0a, r24	; 10
    OCR0A = 0;                                  //motors initialized to 0V - shutdown
 266:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;
 268:	18 bc       	out	0x28, r1	; 40

    TCCR0A |= (1 << COM0A1) | (1 << COM0B1);
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	80 6a       	ori	r24, 0xA0	; 160
 26e:	84 bd       	out	0x24, r24	; 36
    // set none-inverting mode

    TCCR0A |= (1 << WGM01) | (1 << WGM00);
 270:	84 b5       	in	r24, 0x24	; 36
 272:	83 60       	ori	r24, 0x03	; 3
 274:	84 bd       	out	0x24, r24	; 36
    // set fast PWM Mode

    TCCR0B |=  (1 << CS00)  ;                   //prescaler frequency aproximately 100Hz
 276:	85 b5       	in	r24, 0x25	; 37
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	85 bd       	out	0x25, r24	; 37
    //TCCR0B |=  (1 << CS02)  ;
    SetDIR(1,'A');                              //both motors forward
 27c:	41 e4       	ldi	r20, 0x41	; 65
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	ce 01       	movw	r24, r28
 282:	c5 df       	rcall	.-118    	; 0x20e <_ZN10MotorDrive6SetDIREhc>
    SetDIR(1,'B');
 284:	42 e4       	ldi	r20, 0x42	; 66
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	ce 01       	movw	r24, r28
 28a:	c1 df       	rcall	.-126    	; 0x20e <_ZN10MotorDrive6SetDIREhc>

    DDRD &= ~(1 << ENCODER0) | ~(1 << ENCODER1);
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << ENCODER0) | ~(1 << ENCODER1);
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8b b9       	out	0x0b, r24	; 11

    EICRA |= (1 << ISC10) | (1 << ISC11);       //on rising edge interrupt PD2
 294:	e9 e6       	ldi	r30, 0x69	; 105
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8c 60       	ori	r24, 0x0C	; 12
 29c:	80 83       	st	Z, r24
    EICRA |= (1 << ISC00) | (1 << ISC01);       //on rising edge interrupt PD3
 29e:	80 81       	ld	r24, Z
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	80 83       	st	Z, r24
    EIMSK |= (1 << INT0) | (1 << INT1);         //enables both interrupts
 2a4:	8d b3       	in	r24, 0x1d	; 29
 2a6:	83 60       	ori	r24, 0x03	; 3
 2a8:	8d bb       	out	0x1d, r24	; 29

    return 0;
}
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <__vector_1>:
/*
*ISR which takes care of encoder0
*/

ISR (INT0_vect)
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	8f 93       	push	r24
    static uint8_t encoder0=0;
    encoder0+=1;                            //adds impulz
 2be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZZ10__vector_1E8encoder0>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ10__vector_1E8encoder0>
    if(encoder0>32700)encoder0=0;               //zeroes it so we can later measure speed
}
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__vector_2>:


ISR (INT1_vect)
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	8f 93       	push	r24
    static uint8_t encoder1=0;
    encoder1+=1;
 2e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_ZZ10__vector_2E8encoder1>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ZZ10__vector_2E8encoder1>
    if(encoder1>32700)encoder1=0;
}
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <_ZN10MotorDrive12SetSpeedBothEa>:
/*
*INPUT : 2 X speed of motor in percents (0 - 100)
*FUNCTION : sets the speed in timer compare registers
*OUTPUT : none
*/
void MotorDrive::SetSpeedBoth(int8_t speed){
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	8c 01       	movw	r16, r24
 2fe:	c6 2f       	mov	r28, r22
    if(speed>0){
         SetDIR(1,'A');
 300:	41 e4       	ldi	r20, 0x41	; 65
*INPUT : 2 X speed of motor in percents (0 - 100)
*FUNCTION : sets the speed in timer compare registers
*OUTPUT : none
*/
void MotorDrive::SetSpeedBoth(int8_t speed){
    if(speed>0){
 302:	16 16       	cp	r1, r22
 304:	3c f4       	brge	.+14     	; 0x314 <_ZN10MotorDrive12SetSpeedBothEa+0x1e>
         SetDIR(1,'A');
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	82 df       	rcall	.-252    	; 0x20e <_ZN10MotorDrive6SetDIREhc>
         SetDIR(1,'B');
 30a:	42 e4       	ldi	r20, 0x42	; 66
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	c8 01       	movw	r24, r16
 310:	7e df       	rcall	.-260    	; 0x20e <_ZN10MotorDrive6SetDIREhc>
      }
      else{
         SetDIR(-1,'A');
 312:	07 c0       	rjmp	.+14     	; 0x322 <_ZN10MotorDrive12SetSpeedBothEa+0x2c>
 314:	6f ef       	ldi	r22, 0xFF	; 255
         SetDIR(-1,'B');
 316:	7b df       	rcall	.-266    	; 0x20e <_ZN10MotorDrive6SetDIREhc>
 318:	42 e4       	ldi	r20, 0x42	; 66
 31a:	6f ef       	ldi	r22, 0xFF	; 255
 31c:	c8 01       	movw	r24, r16
 31e:	77 df       	rcall	.-274    	; 0x20e <_ZN10MotorDrive6SetDIREhc>
         speed = speed*-1;
 320:	c1 95       	neg	r28
      }


    loop_until_bit_is_set(TIFR0,TOV0);
 322:	a8 9b       	sbis	0x15, 0	; 21
 324:	fe cf       	rjmp	.-4      	; 0x322 <_ZN10MotorDrive12SetSpeedBothEa+0x2c>
    if(speed > 100){
 326:	c5 36       	cpi	r28, 0x65	; 101
 328:	1c f0       	brlt	.+6      	; 0x330 <_ZN10MotorDrive12SetSpeedBothEa+0x3a>
        OCR0A = 215;
 32a:	87 ed       	ldi	r24, 0xD7	; 215
 32c:	87 bd       	out	0x27, r24	; 39
 32e:	06 c0       	rjmp	.+12     	; 0x33c <_ZN10MotorDrive12SetSpeedBothEa+0x46>
        OCR0B = 215;
    }
    else{
        OCR0A = ((4*speed)>>1)+15;          //conversion from 0-100 to 0-215
 330:	6c 2f       	mov	r22, r28
 332:	66 0f       	add	r22, r22
 334:	77 0b       	sbc	r23, r23
 336:	61 5f       	subi	r22, 0xF1	; 241
 338:	67 bd       	out	0x27, r22	; 39
        OCR0B = OCR0A;
 33a:	87 b5       	in	r24, 0x27	; 39
 33c:	88 bd       	out	0x28, r24	; 40
    }
}
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <_Z7initIICv>:

/*
 * Initializes TWI peripheral (400kHz)
 */
void initIIC(){
    TWBR = 2;              //(F_CPU)/(16+2*TWBR) = 400kHZ
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    TWCR |= _BV(TWEN);
 34c:	ec eb       	ldi	r30, 0xBC	; 188
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	84 60       	ori	r24, 0x04	; 4
 354:	80 83       	st	Z, r24
 356:	08 95       	ret

00000358 <_Z18IICwaitForCompletev>:
/*
 * Holds the program until TWI does what it needs to do
 */

void IICwaitForComplete(){
    loop_until_bit_is_set(TWCR,TWINT);
 358:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 35c:	87 ff       	sbrs	r24, 7
 35e:	fc cf       	rjmp	.-8      	; 0x358 <_Z18IICwaitForCompletev>
}
 360:	08 95       	ret

00000362 <_Z12IICsendStartv>:

/*
 * Send START bit - SCL line held high, SDA brought low
 */
void IICsendStart(){
    TWCR = _BV(TWSTA) | _BV(TWINT) | _BV(TWEN);
 362:	84 ea       	ldi	r24, 0xA4	; 164
 364:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    IICwaitForComplete();
 368:	f7 cf       	rjmp	.-18     	; 0x358 <_Z18IICwaitForCompletev>

0000036a <_Z11IICsendStopv>:
/*
 * Send STOP - SCL line held high, SDA brought high
 */

void IICsendStop(){
    TWCR = _BV(TWSTO) | _BV(TWINT) | _BV(TWEN);
 36a:	84 e9       	ldi	r24, 0x94	; 148
 36c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    IICwaitForComplete();
 370:	f3 cf       	rjmp	.-26     	; 0x358 <_Z18IICwaitForCompletev>

00000372 <_Z11IICsendDatah>:

/*
 * Sends 8 bit data
 */
void IICsendData(uint8_t data){
    TWDR = data;
 372:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 376:	84 e8       	ldi	r24, 0x84	; 132
 378:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    IICwaitForComplete();
 37c:	ed cf       	rjmp	.-38     	; 0x358 <_Z18IICwaitForCompletev>

0000037e <_Z10IICreadAckv>:
/*
 * Reads data from peripheral and acknowledges its arrival
 */

uint8_t IICreadAck(){
    TWCR = _BV(TWEA) | _BV(TWINT) | _BV(TWEN);
 37e:	84 ec       	ldi	r24, 0xC4	; 196
 380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    IICwaitForComplete();
 384:	e9 df       	rcall	.-46     	; 0x358 <_Z18IICwaitForCompletev>
    return TWDR;
 386:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 38a:	08 95       	ret

0000038c <_Z11IICreadNackv>:
/*
 * Reads data from peripheral, doesn't acknowledges its arrival
 */

uint8_t IICreadNack(){
    TWCR = _BV(TWINT) | _BV(TWEN);
 38c:	84 e8       	ldi	r24, 0x84	; 132
 38e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    IICwaitForComplete();
 392:	e2 df       	rcall	.-60     	; 0x358 <_Z18IICwaitForCompletev>
    return TWDR;
 394:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 398:	08 95       	ret

0000039a <_Z10IICreadMPUPjh>:
/*
 * Starts communication with MPU6050, takes in 7 words of data and performs computations
 * to return x,y angles from gyro and accelerometer (if returnRaw = 0) or data from MPU (returnRaw = 1)
 */

void IICreadMPU(uint16_t* dataOut,uint8_t returnRaw){
 39a:	2f 92       	push	r2
 39c:	3f 92       	push	r3
 39e:	4f 92       	push	r4
 3a0:	5f 92       	push	r5
 3a2:	6f 92       	push	r6
 3a4:	7f 92       	push	r7
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	2e 97       	sbiw	r28, 0x0e	; 14
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	7c 01       	movw	r14, r24
    IICsendStart();
 3d0:	76 2e       	mov	r7, r22
    IICsendData(MPUADDRESS_READ);
 3d2:	c7 df       	rcall	.-114    	; 0x362 <_Z12IICsendStartv>
    IICsendData(MPUACCEL_REGISTER);
 3d4:	89 e6       	ldi	r24, 0x69	; 105
 3d6:	cd df       	rcall	.-102    	; 0x372 <_Z11IICsendDatah>
    IICsendStart();
 3d8:	8b e3       	ldi	r24, 0x3B	; 59
 3da:	cb df       	rcall	.-106    	; 0x372 <_Z11IICsendDatah>
    IICsendData(MPUADDRESS_WRITE);
 3dc:	c2 df       	rcall	.-124    	; 0x362 <_Z12IICsendStartv>
 3de:	88 e6       	ldi	r24, 0x68	; 104
 3e0:	c8 df       	rcall	.-112    	; 0x372 <_Z11IICsendDatah>
 3e2:	8e 01       	movw	r16, r28
 3e4:	0f 5f       	subi	r16, 0xFF	; 255
 3e6:	1f 4f       	sbci	r17, 0xFF	; 255
 3e8:	6e 01       	movw	r12, r28
 3ea:	8d e0       	ldi	r24, 0x0D	; 13

    uint16_t data[7];
    for(uint8_t i=0;i<6;i++){
    data[i] = (uint16_t)IICreadAck()<<8;
 3ec:	c8 0e       	add	r12, r24
 3ee:	d1 1c       	adc	r13, r1
 3f0:	c6 df       	rcall	.-116    	; 0x37e <_Z10IICreadAckv>
    data[i] |= IICreadAck();
 3f2:	b8 2e       	mov	r11, r24
 3f4:	c4 df       	rcall	.-120    	; 0x37e <_Z10IICreadAckv>
 3f6:	2b 2d       	mov	r18, r11
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	32 2f       	mov	r19, r18
 3fc:	22 27       	eor	r18, r18
 3fe:	28 2b       	or	r18, r24
 400:	f8 01       	movw	r30, r16
    IICsendData(MPUACCEL_REGISTER);
    IICsendStart();
    IICsendData(MPUADDRESS_WRITE);

    uint16_t data[7];
    for(uint8_t i=0;i<6;i++){
 402:	21 93       	st	Z+, r18
 404:	31 93       	st	Z+, r19
 406:	8f 01       	movw	r16, r30
    data[i] = (uint16_t)IICreadAck()<<8;
    data[i] |= IICreadAck();
    }
    data[7] = (uint16_t)IICreadAck()<<8;
 408:	ec 15       	cp	r30, r12
 40a:	fd 05       	cpc	r31, r13
    data[7] |= IICreadNack();
 40c:	89 f7       	brne	.-30     	; 0x3f0 <_Z10IICreadMPUPjh+0x56>
 40e:	b7 df       	rcall	.-146    	; 0x37e <_Z10IICreadAckv>

    IICsendStop();
 410:	bd df       	rcall	.-134    	; 0x38c <_Z11IICreadNackv>
 412:	ab df       	rcall	.-170    	; 0x36a <_Z11IICsendStopv>

    float xAngle  = atan(data[1] / sqrt(data[0] * data[0] + data[2] * data[2])) * RAD_TO_DEG;
 414:	09 81       	ldd	r16, Y+1	; 0x01
 416:	1a 81       	ldd	r17, Y+2	; 0x02
 418:	cd 80       	ldd	r12, Y+5	; 0x05
 41a:	de 80       	ldd	r13, Y+6	; 0x06
 41c:	00 9f       	mul	r16, r16
 41e:	b0 01       	movw	r22, r0
 420:	01 9f       	mul	r16, r17
 422:	70 0d       	add	r23, r0
 424:	70 0d       	add	r23, r0
 426:	11 24       	eor	r1, r1
 428:	cc 9c       	mul	r12, r12
 42a:	c0 01       	movw	r24, r0
 42c:	cd 9c       	mul	r12, r13
 42e:	90 0d       	add	r25, r0
 430:	90 0d       	add	r25, r0
 432:	11 24       	eor	r1, r1
 434:	68 0f       	add	r22, r24
 436:	79 1f       	adc	r23, r25
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	df d2       	rcall	.+1470   	; 0x9fc <__floatunsisf>
 43e:	ff d3       	rcall	.+2046   	; 0xc3e <sqrt>
 440:	4b 01       	movw	r8, r22
 442:	5c 01       	movw	r10, r24
 444:	6b 81       	ldd	r22, Y+3	; 0x03
 446:	7c 81       	ldd	r23, Y+4	; 0x04
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	d7 d2       	rcall	.+1454   	; 0x9fc <__floatunsisf>
 44e:	a5 01       	movw	r20, r10
 450:	94 01       	movw	r18, r8
 452:	3b d2       	rcall	.+1142   	; 0x8ca <__divsf3>
    float yAngle = atan2(-data[0], data[2]) * RAD_TO_DEG;
 454:	12 d2       	rcall	.+1060   	; 0x87a <atan>
 456:	4b 01       	movw	r8, r22
 458:	5c 01       	movw	r10, r24
 45a:	b6 01       	movw	r22, r12
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	cd d2       	rcall	.+1434   	; 0x9fc <__floatunsisf>
 462:	1b 01       	movw	r2, r22
 464:	2c 01       	movw	r4, r24
 466:	66 27       	eor	r22, r22
 468:	77 27       	eor	r23, r23
 46a:	60 1b       	sub	r22, r16
 46c:	71 0b       	sbc	r23, r17
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	c4 d2       	rcall	.+1416   	; 0x9fc <__floatunsisf>
 474:	a2 01       	movw	r20, r4
 476:	91 01       	movw	r18, r2
 478:	d5 d1       	rcall	.+938    	; 0x824 <atan2>
 47a:	1b 01       	movw	r2, r22
 47c:	2c 01       	movw	r4, r24
    double xGyro = data[4] / 131.0; // Convert to deg/s
    double yGyro = data[5] / 131.0;

    if(returnRaw){
 47e:	77 20       	and	r7, r7
 480:	b9 f0       	breq	.+46     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
        for(uint8_t i;i<7;i++){
 482:	f7 e0       	ldi	r31, 0x07	; 7
 484:	6f 16       	cp	r6, r31
 486:	09 f4       	brne	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	47 c0       	rjmp	.+142    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
            dataOut[i] = data[i];
 48a:	86 2d       	mov	r24, r6
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	f7 01       	movw	r30, r14
 494:	e8 0f       	add	r30, r24
 496:	f9 1f       	adc	r31, r25
 498:	a1 e0       	ldi	r26, 0x01	; 1
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	ac 0f       	add	r26, r28
 49e:	bd 1f       	adc	r27, r29
 4a0:	a8 0f       	add	r26, r24
 4a2:	b9 1f       	adc	r27, r25
 4a4:	8d 91       	ld	r24, X+
 4a6:	9c 91       	ld	r25, X
    float yAngle = atan2(-data[0], data[2]) * RAD_TO_DEG;
    double xGyro = data[4] / 131.0; // Convert to deg/s
    double yGyro = data[5] / 131.0;

    if(returnRaw){
        for(uint8_t i;i<7;i++){
 4a8:	91 83       	std	Z+1, r25	; 0x01
 4aa:	80 83       	st	Z, r24

    IICsendStop();

    float xAngle  = atan(data[1] / sqrt(data[0] * data[0] + data[2] * data[2])) * RAD_TO_DEG;
    float yAngle = atan2(-data[0], data[2]) * RAD_TO_DEG;
    double xGyro = data[4] / 131.0; // Convert to deg/s
 4ac:	63 94       	inc	r6
 4ae:	e9 cf       	rjmp	.-46     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        for(uint8_t i;i<7;i++){
            dataOut[i] = data[i];
        }
    }
    else{
        dataOut[0] = xAngle;
 4b0:	09 85       	ldd	r16, Y+9	; 0x09
 4b2:	1a 85       	ldd	r17, Y+10	; 0x0a
 4b4:	cb 84       	ldd	r12, Y+11	; 0x0b
 4b6:	dc 84       	ldd	r13, Y+12	; 0x0c
 4b8:	2c ec       	ldi	r18, 0xCC	; 204
 4ba:	3e e2       	ldi	r19, 0x2E	; 46
 4bc:	45 e6       	ldi	r20, 0x65	; 101
 4be:	52 e4       	ldi	r21, 0x42	; 66
 4c0:	c5 01       	movw	r24, r10
 4c2:	b4 01       	movw	r22, r8
        dataOut[1] = yAngle;
 4c4:	55 d3       	rcall	.+1706   	; 0xb70 <__mulsf3>
 4c6:	6e d2       	rcall	.+1244   	; 0x9a4 <__fixunssfsi>
 4c8:	f7 01       	movw	r30, r14
 4ca:	71 83       	std	Z+1, r23	; 0x01
 4cc:	60 83       	st	Z, r22
 4ce:	2c ec       	ldi	r18, 0xCC	; 204
 4d0:	3e e2       	ldi	r19, 0x2E	; 46
 4d2:	45 e6       	ldi	r20, 0x65	; 101
 4d4:	52 e4       	ldi	r21, 0x42	; 66
 4d6:	c2 01       	movw	r24, r4
        dataOut[2] = xGyro;
 4d8:	b1 01       	movw	r22, r2
 4da:	4a d3       	rcall	.+1684   	; 0xb70 <__mulsf3>
 4dc:	63 d2       	rcall	.+1222   	; 0x9a4 <__fixunssfsi>
 4de:	f7 01       	movw	r30, r14
 4e0:	73 83       	std	Z+3, r23	; 0x03
 4e2:	62 83       	std	Z+2, r22	; 0x02
 4e4:	b8 01       	movw	r22, r16
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	88 d2       	rcall	.+1296   	; 0x9fc <__floatunsisf>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	43 e0       	ldi	r20, 0x03	; 3
 4f2:	53 e4       	ldi	r21, 0x43	; 67
 4f4:	ea d1       	rcall	.+980    	; 0x8ca <__divsf3>
 4f6:	56 d2       	rcall	.+1196   	; 0x9a4 <__fixunssfsi>
        dataOut[3] = yGyro;    }
 4f8:	f7 01       	movw	r30, r14
 4fa:	75 83       	std	Z+5, r23	; 0x05
 4fc:	64 83       	std	Z+4, r22	; 0x04
 4fe:	b6 01       	movw	r22, r12
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	7b d2       	rcall	.+1270   	; 0x9fc <__floatunsisf>
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	43 e0       	ldi	r20, 0x03	; 3
 50c:	53 e4       	ldi	r21, 0x43	; 67
 50e:	dd d1       	rcall	.+954    	; 0x8ca <__divsf3>
 510:	49 d2       	rcall	.+1170   	; 0x9a4 <__fixunssfsi>
 512:	f7 01       	movw	r30, r14
 514:	77 83       	std	Z+7, r23	; 0x07
 516:	66 83       	std	Z+6, r22	; 0x06
}
 518:	2e 96       	adiw	r28, 0x0e	; 14
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	f8 94       	cli
 51e:	de bf       	out	0x3e, r29	; 62
 520:	0f be       	out	0x3f, r0	; 63
 522:	cd bf       	out	0x3d, r28	; 61
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	9f 90       	pop	r9
 53a:	8f 90       	pop	r8
 53c:	7f 90       	pop	r7
 53e:	6f 90       	pop	r6
 540:	5f 90       	pop	r5
 542:	4f 90       	pop	r4
 544:	3f 90       	pop	r3
 546:	2f 90       	pop	r2
 548:	08 95       	ret

0000054a <_ZN3PID10giveOutputEddd>:
 */


#include "pid.h"

float PID::giveOutput(double input, double target, double dt){
 54a:	4f 92       	push	r4
 54c:	5f 92       	push	r5
 54e:	6f 92       	push	r6
 550:	7f 92       	push	r7
 552:	8f 92       	push	r8
 554:	9f 92       	push	r9
 556:	af 92       	push	r10
 558:	bf 92       	push	r11
 55a:	cf 92       	push	r12
 55c:	df 92       	push	r13
 55e:	ef 92       	push	r14
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 d0       	rcall	.+0      	; 0x56c <_ZN3PID10giveOutputEddd+0x22>
 56c:	00 d0       	rcall	.+0      	; 0x56e <_ZN3PID10giveOutputEddd+0x24>
 56e:	00 d0       	rcall	.+0      	; 0x570 <_ZN3PID10giveOutputEddd+0x26>
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	9e 83       	std	Y+6, r25	; 0x06
 576:	8d 83       	std	Y+5, r24	; 0x05
 578:	4a 01       	movw	r8, r20
 57a:	5b 01       	movw	r10, r22
 57c:	c9 01       	movw	r24, r18
 57e:	b8 01       	movw	r22, r16
    float output  = 0;
    float error = target - input;
 580:	a5 01       	movw	r20, r10
 582:	94 01       	movw	r18, r8
 584:	db d0       	rcall	.+438    	; 0x73c <__subsf3>
 586:	4b 01       	movw	r8, r22
 588:	5c 01       	movw	r10, r24
    output = P*(error)+I*(error_sum+error)*dt+D*(error-old_error)/dt;
 58a:	ed 81       	ldd	r30, Y+5	; 0x05
 58c:	fe 81       	ldd	r31, Y+6	; 0x06
 58e:	20 89       	ldd	r18, Z+16	; 0x10
 590:	31 89       	ldd	r19, Z+17	; 0x11
 592:	42 89       	ldd	r20, Z+18	; 0x12
 594:	53 89       	ldd	r21, Z+19	; 0x13
 596:	d3 d0       	rcall	.+422    	; 0x73e <__addsf3>
 598:	69 83       	std	Y+1, r22	; 0x01
 59a:	7a 83       	std	Y+2, r23	; 0x02
 59c:	8b 83       	std	Y+3, r24	; 0x03
 59e:	9c 83       	std	Y+4, r25	; 0x04
 5a0:	ed 81       	ldd	r30, Y+5	; 0x05
 5a2:	fe 81       	ldd	r31, Y+6	; 0x06
 5a4:	24 81       	ldd	r18, Z+4	; 0x04
 5a6:	35 81       	ldd	r19, Z+5	; 0x05
 5a8:	46 81       	ldd	r20, Z+6	; 0x06
 5aa:	57 81       	ldd	r21, Z+7	; 0x07
 5ac:	e1 d2       	rcall	.+1474   	; 0xb70 <__mulsf3>
 5ae:	a7 01       	movw	r20, r14
 5b0:	96 01       	movw	r18, r12
 5b2:	de d2       	rcall	.+1468   	; 0xb70 <__mulsf3>
 5b4:	2b 01       	movw	r4, r22
 5b6:	3c 01       	movw	r6, r24
 5b8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ba:	fe 81       	ldd	r31, Y+6	; 0x06
 5bc:	20 81       	ld	r18, Z
 5be:	31 81       	ldd	r19, Z+1	; 0x01
 5c0:	42 81       	ldd	r20, Z+2	; 0x02
 5c2:	53 81       	ldd	r21, Z+3	; 0x03
 5c4:	c5 01       	movw	r24, r10
 5c6:	b4 01       	movw	r22, r8
 5c8:	d3 d2       	rcall	.+1446   	; 0xb70 <__mulsf3>
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
 5ce:	c3 01       	movw	r24, r6
 5d0:	b2 01       	movw	r22, r4
 5d2:	b5 d0       	rcall	.+362    	; 0x73e <__addsf3>
 5d4:	2b 01       	movw	r4, r22
 5d6:	3c 01       	movw	r6, r24
 5d8:	ed 81       	ldd	r30, Y+5	; 0x05
 5da:	fe 81       	ldd	r31, Y+6	; 0x06
 5dc:	24 85       	ldd	r18, Z+12	; 0x0c
 5de:	35 85       	ldd	r19, Z+13	; 0x0d
 5e0:	46 85       	ldd	r20, Z+14	; 0x0e
 5e2:	57 85       	ldd	r21, Z+15	; 0x0f
 5e4:	c5 01       	movw	r24, r10
 5e6:	b4 01       	movw	r22, r8
 5e8:	a9 d0       	rcall	.+338    	; 0x73c <__subsf3>
 5ea:	ed 81       	ldd	r30, Y+5	; 0x05
 5ec:	fe 81       	ldd	r31, Y+6	; 0x06
 5ee:	20 85       	ldd	r18, Z+8	; 0x08
 5f0:	31 85       	ldd	r19, Z+9	; 0x09
 5f2:	42 85       	ldd	r20, Z+10	; 0x0a
 5f4:	53 85       	ldd	r21, Z+11	; 0x0b
 5f6:	bc d2       	rcall	.+1400   	; 0xb70 <__mulsf3>
 5f8:	a7 01       	movw	r20, r14
 5fa:	96 01       	movw	r18, r12
 5fc:	66 d1       	rcall	.+716    	; 0x8ca <__divsf3>
 5fe:	9b 01       	movw	r18, r22
 600:	ac 01       	movw	r20, r24
 602:	c3 01       	movw	r24, r6
 604:	b2 01       	movw	r22, r4
 606:	9b d0       	rcall	.+310    	; 0x73e <__addsf3>
    error_sum += error;
 608:	29 81       	ldd	r18, Y+1	; 0x01
 60a:	3a 81       	ldd	r19, Y+2	; 0x02
 60c:	4b 81       	ldd	r20, Y+3	; 0x03
 60e:	5c 81       	ldd	r21, Y+4	; 0x04
 610:	ed 81       	ldd	r30, Y+5	; 0x05
 612:	fe 81       	ldd	r31, Y+6	; 0x06
 614:	20 8b       	std	Z+16, r18	; 0x10
 616:	31 8b       	std	Z+17, r19	; 0x11
 618:	42 8b       	std	Z+18, r20	; 0x12
 61a:	53 8b       	std	Z+19, r21	; 0x13
    old_error = error;
 61c:	84 86       	std	Z+12, r8	; 0x0c
 61e:	95 86       	std	Z+13, r9	; 0x0d
 620:	a6 86       	std	Z+14, r10	; 0x0e
 622:	b7 86       	std	Z+15, r11	; 0x0f
    return output;
}
 624:	26 96       	adiw	r28, 0x06	; 6
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	bf 90       	pop	r11
 642:	af 90       	pop	r10
 644:	9f 90       	pop	r9
 646:	8f 90       	pop	r8
 648:	7f 90       	pop	r7
 64a:	6f 90       	pop	r6
 64c:	5f 90       	pop	r5
 64e:	4f 90       	pop	r4
 650:	08 95       	ret

00000652 <_Z9clockInitv>:
#include "timeTracking.h"

void clockInit(){
    TCCR1A &= ~(_BV(WGM10) | _BV(WGM11) | _BV(WGM12) | _BV(WGM13));    //normal mode
 652:	e0 e8       	ldi	r30, 0x80	; 128
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	84 7e       	andi	r24, 0xE4	; 228
 65a:	80 83       	st	Z, r24
 65c:	08 95       	ret

0000065e <_Z10clockStartv>:

}

void clockStart(){
    TCCR1B |= _BV(CS11);                                            //prescaler == 8
 65e:	e1 e8       	ldi	r30, 0x81	; 129
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	82 60       	ori	r24, 0x02	; 2
 666:	80 83       	st	Z, r24
 668:	08 95       	ret

0000066a <_Z9clockTimev>:
}

double clockTime(){
    return TCNT1/65535*0.065535;
 66a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 66e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	8f 3f       	cpi	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	10 f4       	brcc	.+4      	; 0x680 <_Z9clockTimev+0x16>
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	bd d1       	rcall	.+890    	; 0xa00 <__floatsisf>
 686:	27 e3       	ldi	r18, 0x37	; 55
 688:	37 e3       	ldi	r19, 0x37	; 55
 68a:	46 e8       	ldi	r20, 0x86	; 134
 68c:	5d e3       	ldi	r21, 0x3D	; 61
}
 68e:	70 c2       	rjmp	.+1248   	; 0xb70 <__mulsf3>

00000690 <_Z10clockResetv>:

void clockReset(){
    TCNT1 = 0;
 690:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 694:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 698:	08 95       	ret

0000069a <_Z8initUARTv>:
/*
 * initUART : sets baudrate, no parity,8-bit data, 1 stop-bit, asynchronous mode and enables RX, TX pins
 * TODO : Check taht USE_2X thing
*/
void initUART(){
    UBRR0H = UBRRH_VALUE;
 69a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = UBRRL_VALUE;
 69e:	83 e3       	ldi	r24, 0x33	; 51
 6a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    #if USE_2X
    UCSR0A |= (1 << U2X0);
    #else
    UCSR0A &= ~(1 << U2X0);
 6a4:	e0 ec       	ldi	r30, 0xC0	; 192
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	8d 7f       	andi	r24, 0xFD	; 253
 6ac:	80 83       	st	Z, r24
    #endif
    //UBRRH = 0;              //setup for 9600 baudrate UBRRH_VALUE always wanted to use 2x mode
    //UBRRL = 6;


    UCSR0B |= _BV(RXEN0) | _BV(TXEN0);   //enables receiver and transmitter
 6ae:	a1 ec       	ldi	r26, 0xC1	; 193
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	8c 91       	ld	r24, X
 6b4:	88 61       	ori	r24, 0x18	; 24
 6b6:	8c 93       	st	X, r24

    UCSR0C &= ~(_BV(UMSEL0) | _BV(UMSEL1));       //asynchronous mode
 6b8:	e2 ec       	ldi	r30, 0xC2	; 194
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	8f 73       	andi	r24, 0x3F	; 63
 6c0:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(UPM00) | _BV(UPM01));           //no parity mode
 6c2:	80 81       	ld	r24, Z
 6c4:	8f 7c       	andi	r24, 0xCF	; 207
 6c6:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(USBS0));                      //1 stop-bit
 6c8:	80 81       	ld	r24, Z
 6ca:	87 7f       	andi	r24, 0xF7	; 247
 6cc:	80 83       	st	Z, r24
    UCSR0C |= (_BV(UCSZ01) | _BV(UCSZ00));           //8-bits of data
 6ce:	80 81       	ld	r24, Z
 6d0:	86 60       	ori	r24, 0x06	; 6
 6d2:	80 83       	st	Z, r24
    UCSR0C &= ~(_BV(UCSZ02));
 6d4:	80 81       	ld	r24, Z
 6d6:	8b 7f       	andi	r24, 0xFB	; 251
 6d8:	80 83       	st	Z, r24
    #if USE_INTERRUPT
    UCSR0B |= _BV(TXCIE0);                  //enables interrupt on receive
 6da:	8c 91       	ld	r24, X
 6dc:	80 64       	ori	r24, 0x40	; 64
 6de:	8c 93       	st	X, r24
 6e0:	08 95       	ret

000006e2 <__vector_18>:

/*
 * TODO : Check whether it won't be necessary to clear some flags after the interrupt
 */

ISR(USART_RX_vect){
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	8f 93       	push	r24
 6ee:	9f 93       	push	r25
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
    char receivedByte = UDR0;
 6f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if((tracking < 2) && (receivedByte != '\n')){
 6f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <tracking>
 6fc:	92 30       	cpi	r25, 0x02	; 2
 6fe:	10 f4       	brcc	.+4      	; 0x704 <__vector_18+0x22>
 700:	8a 30       	cpi	r24, 0x0A	; 10
 702:	31 f4       	brne	.+12     	; 0x710 <__vector_18+0x2e>
        direction[tracking] = receivedByte;
        directionReceived = 0;
        tracking++;
        }
    else{
        tracking = 0;
 704:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tracking>
        directionReceived = 1;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 70e:	0d c0       	rjmp	.+26     	; 0x72a <__vector_18+0x48>
 */

ISR(USART_RX_vect){
    char receivedByte = UDR0;
    if((tracking < 2) && (receivedByte != '\n')){
        direction[tracking] = receivedByte;
 710:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <tracking>
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	ee 5f       	subi	r30, 0xFE	; 254
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	80 83       	st	Z, r24
        directionReceived = 0;
 71c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        tracking++;
 720:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tracking>
 724:	8f 5f       	subi	r24, 0xFF	; 255
 726:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tracking>
        directionReceived = 1;
    }



}
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__subsf3>:
 73c:	50 58       	subi	r21, 0x80	; 128

0000073e <__addsf3>:
 73e:	bb 27       	eor	r27, r27
 740:	aa 27       	eor	r26, r26
 742:	0e d0       	rcall	.+28     	; 0x760 <__addsf3x>
 744:	d4 c1       	rjmp	.+936    	; 0xaee <__fp_round>
 746:	c5 d1       	rcall	.+906    	; 0xad2 <__fp_pscA>
 748:	30 f0       	brcs	.+12     	; 0x756 <__addsf3+0x18>
 74a:	ca d1       	rcall	.+916    	; 0xae0 <__fp_pscB>
 74c:	20 f0       	brcs	.+8      	; 0x756 <__addsf3+0x18>
 74e:	31 f4       	brne	.+12     	; 0x75c <__addsf3+0x1e>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	11 f4       	brne	.+4      	; 0x758 <__addsf3+0x1a>
 754:	1e f4       	brtc	.+6      	; 0x75c <__addsf3+0x1e>
 756:	95 c1       	rjmp	.+810    	; 0xa82 <__fp_nan>
 758:	0e f4       	brtc	.+2      	; 0x75c <__addsf3+0x1e>
 75a:	e0 95       	com	r30
 75c:	e7 fb       	bst	r30, 7
 75e:	8b c1       	rjmp	.+790    	; 0xa76 <__fp_inf>

00000760 <__addsf3x>:
 760:	e9 2f       	mov	r30, r25
 762:	d6 d1       	rcall	.+940    	; 0xb10 <__fp_split3>
 764:	80 f3       	brcs	.-32     	; 0x746 <__addsf3+0x8>
 766:	ba 17       	cp	r27, r26
 768:	62 07       	cpc	r22, r18
 76a:	73 07       	cpc	r23, r19
 76c:	84 07       	cpc	r24, r20
 76e:	95 07       	cpc	r25, r21
 770:	18 f0       	brcs	.+6      	; 0x778 <__addsf3x+0x18>
 772:	71 f4       	brne	.+28     	; 0x790 <__addsf3x+0x30>
 774:	9e f5       	brtc	.+102    	; 0x7dc <__addsf3x+0x7c>
 776:	ee c1       	rjmp	.+988    	; 0xb54 <__fp_zero>
 778:	0e f4       	brtc	.+2      	; 0x77c <__addsf3x+0x1c>
 77a:	e0 95       	com	r30
 77c:	0b 2e       	mov	r0, r27
 77e:	ba 2f       	mov	r27, r26
 780:	a0 2d       	mov	r26, r0
 782:	0b 01       	movw	r0, r22
 784:	b9 01       	movw	r22, r18
 786:	90 01       	movw	r18, r0
 788:	0c 01       	movw	r0, r24
 78a:	ca 01       	movw	r24, r20
 78c:	a0 01       	movw	r20, r0
 78e:	11 24       	eor	r1, r1
 790:	ff 27       	eor	r31, r31
 792:	59 1b       	sub	r21, r25
 794:	99 f0       	breq	.+38     	; 0x7bc <__addsf3x+0x5c>
 796:	59 3f       	cpi	r21, 0xF9	; 249
 798:	50 f4       	brcc	.+20     	; 0x7ae <__addsf3x+0x4e>
 79a:	50 3e       	cpi	r21, 0xE0	; 224
 79c:	68 f1       	brcs	.+90     	; 0x7f8 <__addsf3x+0x98>
 79e:	1a 16       	cp	r1, r26
 7a0:	f0 40       	sbci	r31, 0x00	; 0
 7a2:	a2 2f       	mov	r26, r18
 7a4:	23 2f       	mov	r18, r19
 7a6:	34 2f       	mov	r19, r20
 7a8:	44 27       	eor	r20, r20
 7aa:	58 5f       	subi	r21, 0xF8	; 248
 7ac:	f3 cf       	rjmp	.-26     	; 0x794 <__addsf3x+0x34>
 7ae:	46 95       	lsr	r20
 7b0:	37 95       	ror	r19
 7b2:	27 95       	ror	r18
 7b4:	a7 95       	ror	r26
 7b6:	f0 40       	sbci	r31, 0x00	; 0
 7b8:	53 95       	inc	r21
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <__addsf3x+0x4e>
 7bc:	7e f4       	brtc	.+30     	; 0x7dc <__addsf3x+0x7c>
 7be:	1f 16       	cp	r1, r31
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	62 0b       	sbc	r22, r18
 7c4:	73 0b       	sbc	r23, r19
 7c6:	84 0b       	sbc	r24, r20
 7c8:	ba f0       	brmi	.+46     	; 0x7f8 <__addsf3x+0x98>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	a1 f0       	breq	.+40     	; 0x7f6 <__addsf3x+0x96>
 7ce:	ff 0f       	add	r31, r31
 7d0:	bb 1f       	adc	r27, r27
 7d2:	66 1f       	adc	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	c2 f7       	brpl	.-16     	; 0x7ca <__addsf3x+0x6a>
 7da:	0e c0       	rjmp	.+28     	; 0x7f8 <__addsf3x+0x98>
 7dc:	ba 0f       	add	r27, r26
 7de:	62 1f       	adc	r22, r18
 7e0:	73 1f       	adc	r23, r19
 7e2:	84 1f       	adc	r24, r20
 7e4:	48 f4       	brcc	.+18     	; 0x7f8 <__addsf3x+0x98>
 7e6:	87 95       	ror	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	9e 3f       	cpi	r25, 0xFE	; 254
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <__addsf3x+0x96>
 7f4:	b3 cf       	rjmp	.-154    	; 0x75c <__addsf3+0x1e>
 7f6:	93 95       	inc	r25
 7f8:	88 0f       	add	r24, r24
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__addsf3x+0x9e>
 7fc:	99 27       	eor	r25, r25
 7fe:	ee 0f       	add	r30, r30
 800:	97 95       	ror	r25
 802:	87 95       	ror	r24
 804:	08 95       	ret
 806:	65 d1       	rcall	.+714    	; 0xad2 <__fp_pscA>
 808:	58 f0       	brcs	.+22     	; 0x820 <__addsf3x+0xc0>
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	09 f4       	brne	.+2      	; 0x812 <__addsf3x+0xb2>
 810:	9e ef       	ldi	r25, 0xFE	; 254
 812:	66 d1       	rcall	.+716    	; 0xae0 <__fp_pscB>
 814:	28 f0       	brcs	.+10     	; 0x820 <__addsf3x+0xc0>
 816:	40 e8       	ldi	r20, 0x80	; 128
 818:	51 e0       	ldi	r21, 0x01	; 1
 81a:	59 f4       	brne	.+22     	; 0x832 <atan2+0xe>
 81c:	5e ef       	ldi	r21, 0xFE	; 254
 81e:	09 c0       	rjmp	.+18     	; 0x832 <atan2+0xe>
 820:	30 c1       	rjmp	.+608    	; 0xa82 <__fp_nan>
 822:	98 c1       	rjmp	.+816    	; 0xb54 <__fp_zero>

00000824 <atan2>:
 824:	e9 2f       	mov	r30, r25
 826:	e0 78       	andi	r30, 0x80	; 128
 828:	73 d1       	rcall	.+742    	; 0xb10 <__fp_split3>
 82a:	68 f3       	brcs	.-38     	; 0x806 <__addsf3x+0xa6>
 82c:	09 2e       	mov	r0, r25
 82e:	05 2a       	or	r0, r21
 830:	c1 f3       	breq	.-16     	; 0x822 <__addsf3x+0xc2>
 832:	26 17       	cp	r18, r22
 834:	37 07       	cpc	r19, r23
 836:	48 07       	cpc	r20, r24
 838:	59 07       	cpc	r21, r25
 83a:	38 f0       	brcs	.+14     	; 0x84a <atan2+0x26>
 83c:	0e 2e       	mov	r0, r30
 83e:	07 f8       	bld	r0, 7
 840:	e0 25       	eor	r30, r0
 842:	69 f0       	breq	.+26     	; 0x85e <atan2+0x3a>
 844:	e0 25       	eor	r30, r0
 846:	e0 64       	ori	r30, 0x40	; 64
 848:	0a c0       	rjmp	.+20     	; 0x85e <atan2+0x3a>
 84a:	ef 63       	ori	r30, 0x3F	; 63
 84c:	07 f8       	bld	r0, 7
 84e:	00 94       	com	r0
 850:	07 fa       	bst	r0, 7
 852:	db 01       	movw	r26, r22
 854:	b9 01       	movw	r22, r18
 856:	9d 01       	movw	r18, r26
 858:	dc 01       	movw	r26, r24
 85a:	ca 01       	movw	r24, r20
 85c:	ad 01       	movw	r20, r26
 85e:	ef 93       	push	r30
 860:	43 d0       	rcall	.+134    	; 0x8e8 <__divsf3_pse>
 862:	45 d1       	rcall	.+650    	; 0xaee <__fp_round>
 864:	0a d0       	rcall	.+20     	; 0x87a <atan>
 866:	5f 91       	pop	r21
 868:	55 23       	and	r21, r21
 86a:	31 f0       	breq	.+12     	; 0x878 <atan2+0x54>
 86c:	2b ed       	ldi	r18, 0xDB	; 219
 86e:	3f e0       	ldi	r19, 0x0F	; 15
 870:	49 e4       	ldi	r20, 0x49	; 73
 872:	50 fd       	sbrc	r21, 0
 874:	49 ec       	ldi	r20, 0xC9	; 201
 876:	63 cf       	rjmp	.-314    	; 0x73e <__addsf3>
 878:	08 95       	ret

0000087a <atan>:
 87a:	df 93       	push	r29
 87c:	dd 27       	eor	r29, r29
 87e:	b9 2f       	mov	r27, r25
 880:	bf 77       	andi	r27, 0x7F	; 127
 882:	40 e8       	ldi	r20, 0x80	; 128
 884:	5f e3       	ldi	r21, 0x3F	; 63
 886:	16 16       	cp	r1, r22
 888:	17 06       	cpc	r1, r23
 88a:	48 07       	cpc	r20, r24
 88c:	5b 07       	cpc	r21, r27
 88e:	10 f4       	brcc	.+4      	; 0x894 <atan+0x1a>
 890:	d9 2f       	mov	r29, r25
 892:	67 d1       	rcall	.+718    	; 0xb62 <inverse>
 894:	9f 93       	push	r25
 896:	8f 93       	push	r24
 898:	7f 93       	push	r23
 89a:	6f 93       	push	r22
 89c:	0e d2       	rcall	.+1052   	; 0xcba <square>
 89e:	e8 e6       	ldi	r30, 0x68	; 104
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	f2 d0       	rcall	.+484    	; 0xa88 <__fp_powser>
 8a4:	24 d1       	rcall	.+584    	; 0xaee <__fp_round>
 8a6:	2f 91       	pop	r18
 8a8:	3f 91       	pop	r19
 8aa:	4f 91       	pop	r20
 8ac:	5f 91       	pop	r21
 8ae:	6c d1       	rcall	.+728    	; 0xb88 <__mulsf3x>
 8b0:	dd 23       	and	r29, r29
 8b2:	49 f0       	breq	.+18     	; 0x8c6 <atan+0x4c>
 8b4:	90 58       	subi	r25, 0x80	; 128
 8b6:	a2 ea       	ldi	r26, 0xA2	; 162
 8b8:	2a ed       	ldi	r18, 0xDA	; 218
 8ba:	3f e0       	ldi	r19, 0x0F	; 15
 8bc:	49 ec       	ldi	r20, 0xC9	; 201
 8be:	5f e3       	ldi	r21, 0x3F	; 63
 8c0:	d0 78       	andi	r29, 0x80	; 128
 8c2:	5d 27       	eor	r21, r29
 8c4:	4d df       	rcall	.-358    	; 0x760 <__addsf3x>
 8c6:	df 91       	pop	r29
 8c8:	12 c1       	rjmp	.+548    	; 0xaee <__fp_round>

000008ca <__divsf3>:
 8ca:	0c d0       	rcall	.+24     	; 0x8e4 <__divsf3x>
 8cc:	10 c1       	rjmp	.+544    	; 0xaee <__fp_round>
 8ce:	08 d1       	rcall	.+528    	; 0xae0 <__fp_pscB>
 8d0:	40 f0       	brcs	.+16     	; 0x8e2 <__divsf3+0x18>
 8d2:	ff d0       	rcall	.+510    	; 0xad2 <__fp_pscA>
 8d4:	30 f0       	brcs	.+12     	; 0x8e2 <__divsf3+0x18>
 8d6:	21 f4       	brne	.+8      	; 0x8e0 <__divsf3+0x16>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	19 f0       	breq	.+6      	; 0x8e2 <__divsf3+0x18>
 8dc:	cc c0       	rjmp	.+408    	; 0xa76 <__fp_inf>
 8de:	51 11       	cpse	r21, r1
 8e0:	3a c1       	rjmp	.+628    	; 0xb56 <__fp_szero>
 8e2:	cf c0       	rjmp	.+414    	; 0xa82 <__fp_nan>

000008e4 <__divsf3x>:
 8e4:	15 d1       	rcall	.+554    	; 0xb10 <__fp_split3>
 8e6:	98 f3       	brcs	.-26     	; 0x8ce <__divsf3+0x4>

000008e8 <__divsf3_pse>:
 8e8:	99 23       	and	r25, r25
 8ea:	c9 f3       	breq	.-14     	; 0x8de <__divsf3+0x14>
 8ec:	55 23       	and	r21, r21
 8ee:	b1 f3       	breq	.-20     	; 0x8dc <__divsf3+0x12>
 8f0:	95 1b       	sub	r25, r21
 8f2:	55 0b       	sbc	r21, r21
 8f4:	bb 27       	eor	r27, r27
 8f6:	aa 27       	eor	r26, r26
 8f8:	62 17       	cp	r22, r18
 8fa:	73 07       	cpc	r23, r19
 8fc:	84 07       	cpc	r24, r20
 8fe:	38 f0       	brcs	.+14     	; 0x90e <__stack+0xf>
 900:	9f 5f       	subi	r25, 0xFF	; 255
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	22 0f       	add	r18, r18
 906:	33 1f       	adc	r19, r19
 908:	44 1f       	adc	r20, r20
 90a:	aa 1f       	adc	r26, r26
 90c:	a9 f3       	breq	.-22     	; 0x8f8 <__divsf3_pse+0x10>
 90e:	33 d0       	rcall	.+102    	; 0x976 <__stack+0x77>
 910:	0e 2e       	mov	r0, r30
 912:	3a f0       	brmi	.+14     	; 0x922 <__stack+0x23>
 914:	e0 e8       	ldi	r30, 0x80	; 128
 916:	30 d0       	rcall	.+96     	; 0x978 <__stack+0x79>
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	e6 95       	lsr	r30
 91e:	00 1c       	adc	r0, r0
 920:	ca f7       	brpl	.-14     	; 0x914 <__stack+0x15>
 922:	29 d0       	rcall	.+82     	; 0x976 <__stack+0x77>
 924:	fe 2f       	mov	r31, r30
 926:	27 d0       	rcall	.+78     	; 0x976 <__stack+0x77>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	26 17       	cp	r18, r22
 932:	37 07       	cpc	r19, r23
 934:	48 07       	cpc	r20, r24
 936:	ab 07       	cpc	r26, r27
 938:	b0 e8       	ldi	r27, 0x80	; 128
 93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0x3f>
 93c:	bb 0b       	sbc	r27, r27
 93e:	80 2d       	mov	r24, r0
 940:	bf 01       	movw	r22, r30
 942:	ff 27       	eor	r31, r31
 944:	93 58       	subi	r25, 0x83	; 131
 946:	5f 4f       	sbci	r21, 0xFF	; 255
 948:	2a f0       	brmi	.+10     	; 0x954 <__stack+0x55>
 94a:	9e 3f       	cpi	r25, 0xFE	; 254
 94c:	51 05       	cpc	r21, r1
 94e:	68 f0       	brcs	.+26     	; 0x96a <__stack+0x6b>
 950:	92 c0       	rjmp	.+292    	; 0xa76 <__fp_inf>
 952:	01 c1       	rjmp	.+514    	; 0xb56 <__fp_szero>
 954:	5f 3f       	cpi	r21, 0xFF	; 255
 956:	ec f3       	brlt	.-6      	; 0x952 <__stack+0x53>
 958:	98 3e       	cpi	r25, 0xE8	; 232
 95a:	dc f3       	brlt	.-10     	; 0x952 <__stack+0x53>
 95c:	86 95       	lsr	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	b7 95       	ror	r27
 964:	f7 95       	ror	r31
 966:	9f 5f       	subi	r25, 0xFF	; 255
 968:	c9 f7       	brne	.-14     	; 0x95c <__stack+0x5d>
 96a:	88 0f       	add	r24, r24
 96c:	91 1d       	adc	r25, r1
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret
 976:	e1 e0       	ldi	r30, 0x01	; 1
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	bb 1f       	adc	r27, r27
 980:	62 17       	cp	r22, r18
 982:	73 07       	cpc	r23, r19
 984:	84 07       	cpc	r24, r20
 986:	ba 07       	cpc	r27, r26
 988:	20 f0       	brcs	.+8      	; 0x992 <__stack+0x93>
 98a:	62 1b       	sub	r22, r18
 98c:	73 0b       	sbc	r23, r19
 98e:	84 0b       	sbc	r24, r20
 990:	ba 0b       	sbc	r27, r26
 992:	ee 1f       	adc	r30, r30
 994:	88 f7       	brcc	.-30     	; 0x978 <__stack+0x79>
 996:	e0 95       	com	r30
 998:	08 95       	ret

0000099a <__fixsfsi>:
 99a:	04 d0       	rcall	.+8      	; 0x9a4 <__fixunssfsi>
 99c:	68 94       	set
 99e:	b1 11       	cpse	r27, r1
 9a0:	da c0       	rjmp	.+436    	; 0xb56 <__fp_szero>
 9a2:	08 95       	ret

000009a4 <__fixunssfsi>:
 9a4:	bd d0       	rcall	.+378    	; 0xb20 <__fp_splitA>
 9a6:	88 f0       	brcs	.+34     	; 0x9ca <__fixunssfsi+0x26>
 9a8:	9f 57       	subi	r25, 0x7F	; 127
 9aa:	90 f0       	brcs	.+36     	; 0x9d0 <__fixunssfsi+0x2c>
 9ac:	b9 2f       	mov	r27, r25
 9ae:	99 27       	eor	r25, r25
 9b0:	b7 51       	subi	r27, 0x17	; 23
 9b2:	a0 f0       	brcs	.+40     	; 0x9dc <__fixunssfsi+0x38>
 9b4:	d1 f0       	breq	.+52     	; 0x9ea <__fixunssfsi+0x46>
 9b6:	66 0f       	add	r22, r22
 9b8:	77 1f       	adc	r23, r23
 9ba:	88 1f       	adc	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	1a f0       	brmi	.+6      	; 0x9c6 <__fixunssfsi+0x22>
 9c0:	ba 95       	dec	r27
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__fixunssfsi+0x12>
 9c4:	12 c0       	rjmp	.+36     	; 0x9ea <__fixunssfsi+0x46>
 9c6:	b1 30       	cpi	r27, 0x01	; 1
 9c8:	81 f0       	breq	.+32     	; 0x9ea <__fixunssfsi+0x46>
 9ca:	c4 d0       	rcall	.+392    	; 0xb54 <__fp_zero>
 9cc:	b1 e0       	ldi	r27, 0x01	; 1
 9ce:	08 95       	ret
 9d0:	c1 c0       	rjmp	.+386    	; 0xb54 <__fp_zero>
 9d2:	67 2f       	mov	r22, r23
 9d4:	78 2f       	mov	r23, r24
 9d6:	88 27       	eor	r24, r24
 9d8:	b8 5f       	subi	r27, 0xF8	; 248
 9da:	39 f0       	breq	.+14     	; 0x9ea <__fixunssfsi+0x46>
 9dc:	b9 3f       	cpi	r27, 0xF9	; 249
 9de:	cc f3       	brlt	.-14     	; 0x9d2 <__fixunssfsi+0x2e>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b3 95       	inc	r27
 9e8:	d9 f7       	brne	.-10     	; 0x9e0 <__fixunssfsi+0x3c>
 9ea:	3e f4       	brtc	.+14     	; 0x9fa <__fixunssfsi+0x56>
 9ec:	90 95       	com	r25
 9ee:	80 95       	com	r24
 9f0:	70 95       	com	r23
 9f2:	61 95       	neg	r22
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	08 95       	ret

000009fc <__floatunsisf>:
 9fc:	e8 94       	clt
 9fe:	09 c0       	rjmp	.+18     	; 0xa12 <__floatsisf+0x12>

00000a00 <__floatsisf>:
 a00:	97 fb       	bst	r25, 7
 a02:	3e f4       	brtc	.+14     	; 0xa12 <__floatsisf+0x12>
 a04:	90 95       	com	r25
 a06:	80 95       	com	r24
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	99 23       	and	r25, r25
 a14:	a9 f0       	breq	.+42     	; 0xa40 <__floatsisf+0x40>
 a16:	f9 2f       	mov	r31, r25
 a18:	96 e9       	ldi	r25, 0x96	; 150
 a1a:	bb 27       	eor	r27, r27
 a1c:	93 95       	inc	r25
 a1e:	f6 95       	lsr	r31
 a20:	87 95       	ror	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f1 11       	cpse	r31, r1
 a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <__floatsisf+0x1c>
 a2c:	fa f4       	brpl	.+62     	; 0xa6c <__floatsisf+0x6c>
 a2e:	bb 0f       	add	r27, r27
 a30:	11 f4       	brne	.+4      	; 0xa36 <__floatsisf+0x36>
 a32:	60 ff       	sbrs	r22, 0
 a34:	1b c0       	rjmp	.+54     	; 0xa6c <__floatsisf+0x6c>
 a36:	6f 5f       	subi	r22, 0xFF	; 255
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f 4f       	sbci	r24, 0xFF	; 255
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	16 c0       	rjmp	.+44     	; 0xa6c <__floatsisf+0x6c>
 a40:	88 23       	and	r24, r24
 a42:	11 f0       	breq	.+4      	; 0xa48 <__floatsisf+0x48>
 a44:	96 e9       	ldi	r25, 0x96	; 150
 a46:	11 c0       	rjmp	.+34     	; 0xa6a <__floatsisf+0x6a>
 a48:	77 23       	and	r23, r23
 a4a:	21 f0       	breq	.+8      	; 0xa54 <__floatsisf+0x54>
 a4c:	9e e8       	ldi	r25, 0x8E	; 142
 a4e:	87 2f       	mov	r24, r23
 a50:	76 2f       	mov	r23, r22
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <__floatsisf+0x5e>
 a54:	66 23       	and	r22, r22
 a56:	71 f0       	breq	.+28     	; 0xa74 <__floatsisf+0x74>
 a58:	96 e8       	ldi	r25, 0x86	; 134
 a5a:	86 2f       	mov	r24, r22
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	2a f0       	brmi	.+10     	; 0xa6c <__floatsisf+0x6c>
 a62:	9a 95       	dec	r25
 a64:	66 0f       	add	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	da f7       	brpl	.-10     	; 0xa62 <__floatsisf+0x62>
 a6c:	88 0f       	add	r24, r24
 a6e:	96 95       	lsr	r25
 a70:	87 95       	ror	r24
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__fp_inf>:
 a76:	97 f9       	bld	r25, 7
 a78:	9f 67       	ori	r25, 0x7F	; 127
 a7a:	80 e8       	ldi	r24, 0x80	; 128
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	08 95       	ret

00000a82 <__fp_nan>:
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	80 ec       	ldi	r24, 0xC0	; 192
 a86:	08 95       	ret

00000a88 <__fp_powser>:
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	1f 93       	push	r17
 a8e:	0f 93       	push	r16
 a90:	ff 92       	push	r15
 a92:	ef 92       	push	r14
 a94:	df 92       	push	r13
 a96:	7b 01       	movw	r14, r22
 a98:	8c 01       	movw	r16, r24
 a9a:	68 94       	set
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__fp_powser+0x20>
 a9e:	da 2e       	mov	r13, r26
 aa0:	ef 01       	movw	r28, r30
 aa2:	72 d0       	rcall	.+228    	; 0xb88 <__mulsf3x>
 aa4:	fe 01       	movw	r30, r28
 aa6:	e8 94       	clt
 aa8:	a5 91       	lpm	r26, Z+
 aaa:	25 91       	lpm	r18, Z+
 aac:	35 91       	lpm	r19, Z+
 aae:	45 91       	lpm	r20, Z+
 ab0:	55 91       	lpm	r21, Z+
 ab2:	ae f3       	brts	.-22     	; 0xa9e <__fp_powser+0x16>
 ab4:	ef 01       	movw	r28, r30
 ab6:	54 de       	rcall	.-856    	; 0x760 <__addsf3x>
 ab8:	fe 01       	movw	r30, r28
 aba:	97 01       	movw	r18, r14
 abc:	a8 01       	movw	r20, r16
 abe:	da 94       	dec	r13
 ac0:	79 f7       	brne	.-34     	; 0xaa0 <__fp_powser+0x18>
 ac2:	df 90       	pop	r13
 ac4:	ef 90       	pop	r14
 ac6:	ff 90       	pop	r15
 ac8:	0f 91       	pop	r16
 aca:	1f 91       	pop	r17
 acc:	cf 91       	pop	r28
 ace:	df 91       	pop	r29
 ad0:	08 95       	ret

00000ad2 <__fp_pscA>:
 ad2:	00 24       	eor	r0, r0
 ad4:	0a 94       	dec	r0
 ad6:	16 16       	cp	r1, r22
 ad8:	17 06       	cpc	r1, r23
 ada:	18 06       	cpc	r1, r24
 adc:	09 06       	cpc	r0, r25
 ade:	08 95       	ret

00000ae0 <__fp_pscB>:
 ae0:	00 24       	eor	r0, r0
 ae2:	0a 94       	dec	r0
 ae4:	12 16       	cp	r1, r18
 ae6:	13 06       	cpc	r1, r19
 ae8:	14 06       	cpc	r1, r20
 aea:	05 06       	cpc	r0, r21
 aec:	08 95       	ret

00000aee <__fp_round>:
 aee:	09 2e       	mov	r0, r25
 af0:	03 94       	inc	r0
 af2:	00 0c       	add	r0, r0
 af4:	11 f4       	brne	.+4      	; 0xafa <__fp_round+0xc>
 af6:	88 23       	and	r24, r24
 af8:	52 f0       	brmi	.+20     	; 0xb0e <__fp_round+0x20>
 afa:	bb 0f       	add	r27, r27
 afc:	40 f4       	brcc	.+16     	; 0xb0e <__fp_round+0x20>
 afe:	bf 2b       	or	r27, r31
 b00:	11 f4       	brne	.+4      	; 0xb06 <__fp_round+0x18>
 b02:	60 ff       	sbrs	r22, 0
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <__fp_round+0x20>
 b06:	6f 5f       	subi	r22, 0xFF	; 255
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	8f 4f       	sbci	r24, 0xFF	; 255
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	08 95       	ret

00000b10 <__fp_split3>:
 b10:	57 fd       	sbrc	r21, 7
 b12:	90 58       	subi	r25, 0x80	; 128
 b14:	44 0f       	add	r20, r20
 b16:	55 1f       	adc	r21, r21
 b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
 b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
 b20:	88 0f       	add	r24, r24
 b22:	97 fb       	bst	r25, 7
 b24:	99 1f       	adc	r25, r25
 b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
 b28:	9f 3f       	cpi	r25, 0xFF	; 255
 b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
 b2c:	87 95       	ror	r24
 b2e:	08 95       	ret
 b30:	12 16       	cp	r1, r18
 b32:	13 06       	cpc	r1, r19
 b34:	14 06       	cpc	r1, r20
 b36:	55 1f       	adc	r21, r21
 b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
 b3a:	46 95       	lsr	r20
 b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
 b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	99 1f       	adc	r25, r25
 b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
 b4a:	86 95       	lsr	r24
 b4c:	71 05       	cpc	r23, r1
 b4e:	61 05       	cpc	r22, r1
 b50:	08 94       	sec
 b52:	08 95       	ret

00000b54 <__fp_zero>:
 b54:	e8 94       	clt

00000b56 <__fp_szero>:
 b56:	bb 27       	eor	r27, r27
 b58:	66 27       	eor	r22, r22
 b5a:	77 27       	eor	r23, r23
 b5c:	cb 01       	movw	r24, r22
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <inverse>:
 b62:	9b 01       	movw	r18, r22
 b64:	ac 01       	movw	r20, r24
 b66:	60 e0       	ldi	r22, 0x00	; 0
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	9f e3       	ldi	r25, 0x3F	; 63
 b6e:	ad ce       	rjmp	.-678    	; 0x8ca <__divsf3>

00000b70 <__mulsf3>:
 b70:	0b d0       	rcall	.+22     	; 0xb88 <__mulsf3x>
 b72:	bd cf       	rjmp	.-134    	; 0xaee <__fp_round>
 b74:	ae df       	rcall	.-164    	; 0xad2 <__fp_pscA>
 b76:	28 f0       	brcs	.+10     	; 0xb82 <__mulsf3+0x12>
 b78:	b3 df       	rcall	.-154    	; 0xae0 <__fp_pscB>
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <__mulsf3+0x12>
 b7c:	95 23       	and	r25, r21
 b7e:	09 f0       	breq	.+2      	; 0xb82 <__mulsf3+0x12>
 b80:	7a cf       	rjmp	.-268    	; 0xa76 <__fp_inf>
 b82:	7f cf       	rjmp	.-258    	; 0xa82 <__fp_nan>
 b84:	11 24       	eor	r1, r1
 b86:	e7 cf       	rjmp	.-50     	; 0xb56 <__fp_szero>

00000b88 <__mulsf3x>:
 b88:	c3 df       	rcall	.-122    	; 0xb10 <__fp_split3>
 b8a:	a0 f3       	brcs	.-24     	; 0xb74 <__mulsf3+0x4>

00000b8c <__mulsf3_pse>:
 b8c:	95 9f       	mul	r25, r21
 b8e:	d1 f3       	breq	.-12     	; 0xb84 <__mulsf3+0x14>
 b90:	95 0f       	add	r25, r21
 b92:	50 e0       	ldi	r21, 0x00	; 0
 b94:	55 1f       	adc	r21, r21
 b96:	62 9f       	mul	r22, r18
 b98:	f0 01       	movw	r30, r0
 b9a:	72 9f       	mul	r23, r18
 b9c:	bb 27       	eor	r27, r27
 b9e:	f0 0d       	add	r31, r0
 ba0:	b1 1d       	adc	r27, r1
 ba2:	63 9f       	mul	r22, r19
 ba4:	aa 27       	eor	r26, r26
 ba6:	f0 0d       	add	r31, r0
 ba8:	b1 1d       	adc	r27, r1
 baa:	aa 1f       	adc	r26, r26
 bac:	64 9f       	mul	r22, r20
 bae:	66 27       	eor	r22, r22
 bb0:	b0 0d       	add	r27, r0
 bb2:	a1 1d       	adc	r26, r1
 bb4:	66 1f       	adc	r22, r22
 bb6:	82 9f       	mul	r24, r18
 bb8:	22 27       	eor	r18, r18
 bba:	b0 0d       	add	r27, r0
 bbc:	a1 1d       	adc	r26, r1
 bbe:	62 1f       	adc	r22, r18
 bc0:	73 9f       	mul	r23, r19
 bc2:	b0 0d       	add	r27, r0
 bc4:	a1 1d       	adc	r26, r1
 bc6:	62 1f       	adc	r22, r18
 bc8:	83 9f       	mul	r24, r19
 bca:	a0 0d       	add	r26, r0
 bcc:	61 1d       	adc	r22, r1
 bce:	22 1f       	adc	r18, r18
 bd0:	74 9f       	mul	r23, r20
 bd2:	33 27       	eor	r19, r19
 bd4:	a0 0d       	add	r26, r0
 bd6:	61 1d       	adc	r22, r1
 bd8:	23 1f       	adc	r18, r19
 bda:	84 9f       	mul	r24, r20
 bdc:	60 0d       	add	r22, r0
 bde:	21 1d       	adc	r18, r1
 be0:	82 2f       	mov	r24, r18
 be2:	76 2f       	mov	r23, r22
 be4:	6a 2f       	mov	r22, r26
 be6:	11 24       	eor	r1, r1
 be8:	9f 57       	subi	r25, 0x7F	; 127
 bea:	50 40       	sbci	r21, 0x00	; 0
 bec:	8a f0       	brmi	.+34     	; 0xc10 <__mulsf3_pse+0x84>
 bee:	e1 f0       	breq	.+56     	; 0xc28 <__mulsf3_pse+0x9c>
 bf0:	88 23       	and	r24, r24
 bf2:	4a f0       	brmi	.+18     	; 0xc06 <__mulsf3_pse+0x7a>
 bf4:	ee 0f       	add	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	bb 1f       	adc	r27, r27
 bfa:	66 1f       	adc	r22, r22
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 1f       	adc	r24, r24
 c00:	91 50       	subi	r25, 0x01	; 1
 c02:	50 40       	sbci	r21, 0x00	; 0
 c04:	a9 f7       	brne	.-22     	; 0xbf0 <__mulsf3_pse+0x64>
 c06:	9e 3f       	cpi	r25, 0xFE	; 254
 c08:	51 05       	cpc	r21, r1
 c0a:	70 f0       	brcs	.+28     	; 0xc28 <__mulsf3_pse+0x9c>
 c0c:	34 cf       	rjmp	.-408    	; 0xa76 <__fp_inf>
 c0e:	a3 cf       	rjmp	.-186    	; 0xb56 <__fp_szero>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	ec f3       	brlt	.-6      	; 0xc0e <__mulsf3_pse+0x82>
 c14:	98 3e       	cpi	r25, 0xE8	; 232
 c16:	dc f3       	brlt	.-10     	; 0xc0e <__mulsf3_pse+0x82>
 c18:	86 95       	lsr	r24
 c1a:	77 95       	ror	r23
 c1c:	67 95       	ror	r22
 c1e:	b7 95       	ror	r27
 c20:	f7 95       	ror	r31
 c22:	e7 95       	ror	r30
 c24:	9f 5f       	subi	r25, 0xFF	; 255
 c26:	c1 f7       	brne	.-16     	; 0xc18 <__mulsf3_pse+0x8c>
 c28:	fe 2b       	or	r31, r30
 c2a:	88 0f       	add	r24, r24
 c2c:	91 1d       	adc	r25, r1
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret
 c36:	11 f4       	brne	.+4      	; 0xc3c <__mulsf3_pse+0xb0>
 c38:	0e f4       	brtc	.+2      	; 0xc3c <__mulsf3_pse+0xb0>
 c3a:	23 cf       	rjmp	.-442    	; 0xa82 <__fp_nan>
 c3c:	41 c0       	rjmp	.+130    	; 0xcc0 <__fp_mpack>

00000c3e <sqrt>:
 c3e:	70 df       	rcall	.-288    	; 0xb20 <__fp_splitA>
 c40:	d0 f3       	brcs	.-12     	; 0xc36 <__mulsf3_pse+0xaa>
 c42:	99 23       	and	r25, r25
 c44:	d9 f3       	breq	.-10     	; 0xc3c <__mulsf3_pse+0xb0>
 c46:	ce f3       	brts	.-14     	; 0xc3a <__mulsf3_pse+0xae>
 c48:	9f 57       	subi	r25, 0x7F	; 127
 c4a:	55 0b       	sbc	r21, r21
 c4c:	87 ff       	sbrs	r24, 7
 c4e:	46 d0       	rcall	.+140    	; 0xcdc <__fp_norm2>
 c50:	00 24       	eor	r0, r0
 c52:	a0 e6       	ldi	r26, 0x60	; 96
 c54:	40 ea       	ldi	r20, 0xA0	; 160
 c56:	90 01       	movw	r18, r0
 c58:	80 58       	subi	r24, 0x80	; 128
 c5a:	56 95       	lsr	r21
 c5c:	97 95       	ror	r25
 c5e:	28 f4       	brcc	.+10     	; 0xc6a <sqrt+0x2c>
 c60:	80 5c       	subi	r24, 0xC0	; 192
 c62:	66 0f       	add	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	20 f0       	brcs	.+8      	; 0xc72 <sqrt+0x34>
 c6a:	26 17       	cp	r18, r22
 c6c:	37 07       	cpc	r19, r23
 c6e:	48 07       	cpc	r20, r24
 c70:	30 f4       	brcc	.+12     	; 0xc7e <sqrt+0x40>
 c72:	62 1b       	sub	r22, r18
 c74:	73 0b       	sbc	r23, r19
 c76:	84 0b       	sbc	r24, r20
 c78:	20 29       	or	r18, r0
 c7a:	31 29       	or	r19, r1
 c7c:	4a 2b       	or	r20, r26
 c7e:	a6 95       	lsr	r26
 c80:	17 94       	ror	r1
 c82:	07 94       	ror	r0
 c84:	20 25       	eor	r18, r0
 c86:	31 25       	eor	r19, r1
 c88:	4a 27       	eor	r20, r26
 c8a:	58 f7       	brcc	.-42     	; 0xc62 <sqrt+0x24>
 c8c:	66 0f       	add	r22, r22
 c8e:	77 1f       	adc	r23, r23
 c90:	88 1f       	adc	r24, r24
 c92:	20 f0       	brcs	.+8      	; 0xc9c <sqrt+0x5e>
 c94:	26 17       	cp	r18, r22
 c96:	37 07       	cpc	r19, r23
 c98:	48 07       	cpc	r20, r24
 c9a:	30 f4       	brcc	.+12     	; 0xca8 <sqrt+0x6a>
 c9c:	62 0b       	sbc	r22, r18
 c9e:	73 0b       	sbc	r23, r19
 ca0:	84 0b       	sbc	r24, r20
 ca2:	20 0d       	add	r18, r0
 ca4:	31 1d       	adc	r19, r1
 ca6:	41 1d       	adc	r20, r1
 ca8:	a0 95       	com	r26
 caa:	81 f7       	brne	.-32     	; 0xc8c <sqrt+0x4e>
 cac:	b9 01       	movw	r22, r18
 cae:	84 2f       	mov	r24, r20
 cb0:	91 58       	subi	r25, 0x81	; 129
 cb2:	88 0f       	add	r24, r24
 cb4:	96 95       	lsr	r25
 cb6:	87 95       	ror	r24
 cb8:	08 95       	ret

00000cba <square>:
 cba:	9b 01       	movw	r18, r22
 cbc:	ac 01       	movw	r20, r24
 cbe:	58 cf       	rjmp	.-336    	; 0xb70 <__mulsf3>

00000cc0 <__fp_mpack>:
 cc0:	9f 3f       	cpi	r25, 0xFF	; 255
 cc2:	31 f0       	breq	.+12     	; 0xcd0 <__fp_mpack_finite+0xc>

00000cc4 <__fp_mpack_finite>:
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	20 f4       	brcc	.+8      	; 0xcd0 <__fp_mpack_finite+0xc>
 cc8:	87 95       	ror	r24
 cca:	77 95       	ror	r23
 ccc:	67 95       	ror	r22
 cce:	b7 95       	ror	r27
 cd0:	88 0f       	add	r24, r24
 cd2:	91 1d       	adc	r25, r1
 cd4:	96 95       	lsr	r25
 cd6:	87 95       	ror	r24
 cd8:	97 f9       	bld	r25, 7
 cda:	08 95       	ret

00000cdc <__fp_norm2>:
 cdc:	91 50       	subi	r25, 0x01	; 1
 cde:	50 40       	sbci	r21, 0x00	; 0
 ce0:	66 0f       	add	r22, r22
 ce2:	77 1f       	adc	r23, r23
 ce4:	88 1f       	adc	r24, r24
 ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__fp_norm2>
 ce8:	08 95       	ret

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
